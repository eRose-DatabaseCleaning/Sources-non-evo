






































typedef unsigned char       BYTE;

	
		
	





class CBITARRAY {
protected:
	BYTE   *m_pDATA;
	int		m_iMaxDataCount;
	int		m_iByteLength;

public   :
	void SetArray (BYTE *pDATA, short nDataByteCnt);
	BYTE*GetArray (void)		{	return m_pDATA;		}
	void ClearAll (void);
	void FillAll (void);
} ;



class C1BITARRAY : public CBITARRAY {
private :
	enum { DEFAULT_LENGTH=64, BIT_SHIFT=3, WHICH_BIT=0x07 };
	BYTE	m_btBitMask[8];

public :
	C1BITARRAY (int iLength=DEFAULT_LENGTH);
	~C1BITARRAY ();

	BYTE GetBit (int iIndex);
	void SetBit (int iIndex);
	void ClearBit (int iIndex);
	BYTE FlipBit (int iIndex);
} ;



class C2BITARRAY : public CBITARRAY {
private :
	enum { DEFAULT_LENGTH=64, BIT_SHIFT=2, WHICH_BIT=0x03, MAX_VALUE=0x03 };
	BYTE	m_btBitMask[4];

public :
	C2BITARRAY (int iLength=DEFAULT_LENGTH);
	~C2BITARRAY ();

	BYTE GetValue (int iIndex);
	void SetValue (int iIndex, BYTE btValue);
	void ClearValue (int iIndex);
} ;



class C4BITARRAY : public CBITARRAY {
private :
	enum { DEFAULT_LENGTH=64, BIT_SHIFT=1, WHICH_BIT=0x01, MAX_VALUE=0x0f };
	BYTE	m_btBitMask[2];

public :
	C4BITARRAY (int iLength=DEFAULT_LENGTH);
	~C4BITARRAY ();

	BYTE GetValue (int iIndex);
	void SetValue (int iIndex, BYTE btValue);
	void ClearValue (int iIndex);
} ;






















#pragma once




















 














































    































































































































































































































#pragma once







extern "C" {

































































































































































































































    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    




































































































































































































































    
    











}




































































































#pragma pack(push,8)
















#pragma once

















#pragma pack(push,8)



extern "C" {















typedef __w64 unsigned int   uintptr_t;








typedef char *  va_list;





















































































}



#pragma pack(pop)






extern "C" {





































































































 


  
 

























































































































































 
  
 







 
  
  
 







 
  
   
  


 
























typedef __w64 unsigned int   size_t;






typedef size_t rsize_t;








typedef __w64 int            intptr_t;

















typedef __w64 int            ptrdiff_t;










typedef unsigned short wint_t;
typedef unsigned short wctype_t;



























__declspec(deprecated("This name was supported during some Whidbey pre-releases. Instead, use the standard name errno_t.")) typedef int errcode;




typedef int errno_t;



typedef __w64 long __time32_t;   





typedef __int64 __time64_t;     








typedef __time64_t time_t;      














































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































struct threadlocaleinfostruct;
struct threadmbcinfostruct;
typedef struct threadlocaleinfostruct * pthreadlocinfo;
typedef struct threadmbcinfostruct * pthreadmbcinfo;
struct __lc_time_data;

typedef struct localeinfo_struct
{
    pthreadlocinfo locinfo;
    pthreadmbcinfo mbcinfo;
} _locale_tstruct, *_locale_t;


typedef struct tagLC_ID {
        unsigned short wLanguage;
        unsigned short wCountry;
        unsigned short wCodePage;
} LC_ID, *LPLC_ID;




typedef struct threadlocaleinfostruct {
        int refcount;
        unsigned int lc_codepage;
        unsigned int lc_collate_cp;
        unsigned long lc_handle[6]; 
        LC_ID lc_id[6];
        struct {
            char *locale;
            wchar_t *wlocale;
            int *refcount;
            int *wrefcount;
        } lc_category[6];
        int lc_clike;
        int mb_cur_max;
        int * lconv_intl_refcount;
        int * lconv_num_refcount;
        int * lconv_mon_refcount;
        struct lconv * lconv;
        int * ctype1_refcount;
        unsigned short * ctype1;
        const unsigned short * pctype;
        const unsigned char * pclmap;
        const unsigned char * pcumap;
        struct __lc_time_data * lc_time_curr;
} threadlocinfo;




}
































#pragma pack(pop)







extern "C" {

















 void *  __cdecl _memccpy(        void * _Dst,      const void * _Src,      int _Val,      size_t _MaxCount);
  const void *  __cdecl memchr(          const void * _Buf ,      int _Val,      size_t _MaxCount);
  int     __cdecl _memicmp(         const void * _Buf1,          const void * _Buf2,      size_t _Size);
  int     __cdecl _memicmp_l(         const void * _Buf1,          const void * _Buf2,      size_t _Size,        _locale_t _Locale);
         int     __cdecl memcmp(         const void * _Buf1,          const void * _Buf2,      size_t _Size);
         void *  __cdecl memcpy(         void * _Dst,          const void * _Src,      size_t _Size);

 errno_t  __cdecl memcpy_s(         void * _Dst,      rsize_t _DstSize,          const void * _Src,      rsize_t _MaxCount);

        void *  __cdecl memset(         void * _Dst,      int _Val,      size_t _Size);



__declspec(deprecated("The POSIX name for this item is deprecated. Instead, use the ISO C++ conformant name: " "_memccpy" ". See online help for details."))  void * __cdecl memccpy(       void * _Dst,          const void * _Src,      int _Val,      size_t _Size);
__declspec(deprecated("The POSIX name for this item is deprecated. Instead, use the ISO C++ conformant name: " "_memicmp" ". See online help for details."))   int __cdecl memicmp(         const void * _Buf1,          const void * _Buf2,      size_t _Size);







extern "C++" inline  void * __cdecl memchr(          void * _Pv ,      int _C,      size_t _N)
	{ return (void*)memchr((const void*)_Pv, _C, _N); }




}







void CBITARRAY::SetArray (BYTE *pDATA, short nDataByteCnt)
{
	int iMinBytes;

	iMinBytes = ( nDataByteCnt < m_iByteLength ) ? nDataByteCnt : m_iByteLength;
	memcpy (m_pDATA, pDATA, iMinBytes);
}
void CBITARRAY::ClearAll (void)
{
	memset (m_pDATA, 0, m_iByteLength);
}
void CBITARRAY::FillAll (void)
{
	memset (m_pDATA, 0xff, m_iByteLength);
}


C1BITARRAY::C1BITARRAY (int iLength)
{
	for (char cI=0; cI<8; cI++)
		m_btBitMask[ cI ] = 1 << cI;

	if ( iLength <= 0 )
		m_iMaxDataCount = DEFAULT_LENGTH;
	else
		m_iMaxDataCount = iLength;

	m_iByteLength = (m_iMaxDataCount >> BIT_SHIFT)+1;
	m_pDATA = new BYTE [ m_iByteLength ];
	ClearAll ();
}

C1BITARRAY::~C1BITARRAY ()
{
	delete[] m_pDATA;
}

BYTE C1BITARRAY::GetBit (int iIndex)
{
	if ( iIndex >= 0 && iIndex < m_iMaxDataCount )
		return ( m_pDATA[ iIndex >> BIT_SHIFT ] & m_btBitMask[ iIndex & WHICH_BIT ] );

	return 0;
}

void C1BITARRAY::SetBit (int iIndex)
{
	if ( iIndex >= 0 && iIndex < m_iMaxDataCount ) 
		m_pDATA[ iIndex >> BIT_SHIFT ] |= m_btBitMask[ iIndex & WHICH_BIT ];
}

void C1BITARRAY::ClearBit (int iIndex)
{
	if ( iIndex >= 0 && iIndex < m_iMaxDataCount ) 
		m_pDATA[ iIndex >> BIT_SHIFT ] &= ~(m_btBitMask[ iIndex & WHICH_BIT ]);
}

BYTE C1BITARRAY::FlipBit (int iIndex)
{
	if ( GetBit( iIndex ) )
		ClearBit( iIndex );
	else
		SetBit ( iIndex );

	return GetBit( iIndex );
}





C2BITARRAY::C2BITARRAY (int iLength)
{
	for (char cI=0; cI<8; cI+=2)
		m_btBitMask[ cI/2 ] = MAX_VALUE << cI;

	if ( iLength <= 0 )
		m_iMaxDataCount = DEFAULT_LENGTH;
	else
		m_iMaxDataCount = iLength;

	m_iByteLength = (m_iMaxDataCount >> BIT_SHIFT)+1;
	m_pDATA = new BYTE [ m_iByteLength ];
	ClearAll ();
}

C2BITARRAY::~C2BITARRAY ()
{
	if ( m_pDATA )
		delete[] m_pDATA;
	m_pDATA = 0;
}

BYTE C2BITARRAY::GetValue (int iIndex)
{
	if ( iIndex >= 0 && iIndex < m_iMaxDataCount ) {
		BYTE btValue;

		btValue = m_pDATA[ iIndex >> BIT_SHIFT ] & m_btBitMask[ iIndex & WHICH_BIT ];
		return ( btValue >> ( (iIndex & WHICH_BIT)<<1 ) );
	}

	return 0;
}

void C2BITARRAY::SetValue (int iIndex, BYTE btValue)
{
	if ( iIndex >= 0 && iIndex < m_iMaxDataCount ) {
		btValue &= MAX_VALUE;
		btValue <<= ( (iIndex & WHICH_BIT)<<1 );
		m_pDATA[ iIndex >> BIT_SHIFT ] &= ~(m_btBitMask[ iIndex & WHICH_BIT ]);
		m_pDATA[ iIndex >> BIT_SHIFT ] |= btValue;
	}
}

void C2BITARRAY::ClearValue (int iIndex)
{
	if ( iIndex >= 0 && iIndex < m_iMaxDataCount ) 
		m_pDATA[ iIndex >> BIT_SHIFT ] &= ~(m_btBitMask[ iIndex & WHICH_BIT ]);
}




C4BITARRAY::C4BITARRAY (int iLength)
{
	for (char cI=0; cI<8; cI+=4)
		m_btBitMask[ cI/4 ] = MAX_VALUE << cI;

	if ( iLength <= 0 )
		m_iMaxDataCount = DEFAULT_LENGTH;
	else
		m_iMaxDataCount = iLength;

	m_iByteLength = (m_iMaxDataCount >> BIT_SHIFT)+1;
	m_pDATA = new BYTE [ m_iByteLength ];
	ClearAll ();
}

C4BITARRAY::~C4BITARRAY ()
{
	delete[] m_pDATA;
}

BYTE C4BITARRAY::GetValue (int iIndex)
{
	if ( iIndex >= 0 && iIndex < m_iMaxDataCount ) {
		BYTE btValue;

		btValue = m_pDATA[ iIndex >> BIT_SHIFT ] & m_btBitMask[ iIndex & WHICH_BIT ];
		return ( btValue >> ( (iIndex & WHICH_BIT)<<2 ) );
	}

	return 0;
}

void C4BITARRAY::SetValue (int iIndex, BYTE btValue)
{
	if ( iIndex >= 0 && iIndex < m_iMaxDataCount ) {
		btValue &= MAX_VALUE;
		btValue <<= ( (iIndex & WHICH_BIT)<<2 );
		m_pDATA[ iIndex >> BIT_SHIFT ] &= ~(m_btBitMask[ iIndex & WHICH_BIT ]);
		m_pDATA[ iIndex >> BIT_SHIFT ] |= btValue;
	}
}

void C4BITARRAY::ClearValue (int iIndex)
{
	if ( iIndex >= 0 && iIndex < m_iMaxDataCount ) 
		m_pDATA[ iIndex >> BIT_SHIFT ] &= ~(m_btBitMask[ iIndex & WHICH_BIT ]);
}



